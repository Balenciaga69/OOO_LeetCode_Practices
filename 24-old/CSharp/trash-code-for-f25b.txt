using Newtonsoft.Json;
using System.Text;

string filePath = "./xxx.txt";
string fileContent = File.ReadAllText(filePath);
string resultContent = ProcessContent(fileContent, 512);
var (a, b) = (Encoding.UTF8.GetByteCount(fileContent), Encoding.UTF8.GetByteCount(resultContent));
var id = "GetComboBox";

static string ProcessContent(string content, int jsonStringLimit)
{
    var trimContent = content.Trim();

    if ((trimContent.StartsWith("{") && trimContent.EndsWith("}")) || (trimContent.StartsWith("[") && trimContent.EndsWith("]")))
    {
        return SimplifyJson(content, jsonStringLimit);
    }

    return content;
}

static string SimplifyJson(string json, int limit)
{
    var sb = new StringBuilder();
    using (var reader = new JsonTextReader(new StringReader(json)))
    using (var writer = new JsonTextWriter(new StringWriter(sb)))
    {
        writer.Formatting = Newtonsoft.Json.Formatting.None;

        Run(reader, writer, limit);
    }

    return sb.ToString();
}

static void Run(JsonTextReader reader, JsonTextWriter writer, int limit)
{
    while (reader.Read())
    {
        var tokenType = reader.TokenType;

        switch (tokenType)
        {
            case JsonToken.None:
                continue;
            case JsonToken.StartObject:
                writer.WriteStartObject();
                break;
            case JsonToken.EndObject:
                writer.WriteEndObject();
                break;
            case JsonToken.StartArray:
                writer.WriteStartArray();
                break;
            case JsonToken.EndArray:
                writer.WriteEndArray();
                break;
            case JsonToken.PropertyName:
                var name = reader.Value.ToString();
                writer.WritePropertyName(name);
                break;
            case JsonToken.String:
                var value = reader.Value.ToString();
                if (limit > 0 && value.Length > limit)
                {
                    var hint = $"...[Total {value.Length} Bytes]";
                    var truncatedValue = value.Substring(0, limit) + hint;
                    writer.WriteValue(truncatedValue);
                }
                else
                {
                    writer.WriteValue(value);
                }
                break;
            case JsonToken.Integer:
            case JsonToken.Float:
                writer.WriteValue(reader.Value);
                break;
            case JsonToken.Boolean:
                writer.WriteValue(reader.Value);
                break;
            case JsonToken.Null:
                writer.WriteNull();
                break;
        }
    }

    writer.Flush();
}